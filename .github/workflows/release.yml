name: Create Release

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version"
        required: true
        type: string
  workflow_call:
    inputs:
      version:
        description: "Semantic version"
        required: true
        type: string

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.78.0
          profile: minimal
      - name: Run tests
        run: cargo test --all

  create_tag:
    name: Create tag
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "Invalid semantic version format"
            exit 1
          fi
      - name: Check if tag exists
        run: |
          if git rev-parse v${{ github.event.inputs.version }} >/dev/null 2>&1; then
            echo "Tag v${{ github.event.inputs.version }} already exists"
            exit 1
          fi
      - name: Tag and push
        run: |
          git tag v${{ github.event.inputs.version }}
          git push origin v${{ github.event.inputs.version }}

  build:
    name: Build binaries
    needs: create_tag
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.78.0
          profile: minimal
      - name: Build release binary
        run: cargo build --release
      - name: Package artifact
        shell: bash
        run: |
          mkdir -p dist
          TARGET=$(rustc -vV | sed -n 's|host: ||p')
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/release/aicm.exe dist/aicm-${TARGET}.exe
          else
            cp target/release/aicm dist/aicm-${TARGET}
          fi
          echo "TARGET=${TARGET}" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aicm-${{ env.TARGET }}
          path: dist/*

  release:
    name: Publish release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Generate release notes
        id: generate_notes
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Generating release notes...');
            
            // Get all releases to find the previous one
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Find previous release (excluding current version if it exists)
            const currentVersion = '${{ github.event.inputs.version }}';
            const previousRelease = releases.find(release => 
              release.tag_name !== currentVersion && !release.draft && !release.prerelease
            );
            
            let sinceDate;
            let compareUrl = '';
            
            if (previousRelease) {
              console.log(`Previous release found: ${previousRelease.tag_name}`);
              sinceDate = previousRelease.published_at;
              compareUrl = `\n\n**Full Changelog**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${previousRelease.tag_name}...${currentVersion}`;
            } else {
              console.log('No previous release found, using repository creation date');
              const { data: repo } = await github.rest.repos.get({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              sinceDate = repo.created_at;
            }
            
            // Get merged PRs since the previous release
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              base: 'main',
              sort: 'updated',
              direction: 'desc',
              per_page: 100
            });
            
            // Filter PRs that were merged after the previous release
            const mergedPRs = pulls.filter(pr => 
              pr.merged_at && 
              new Date(pr.merged_at) > new Date(sinceDate)
            );
            
            // Generate release notes
            let releaseNotes = '## What\'s Changed\n';
            
            if (mergedPRs.length > 0) {
              for (const pr of mergedPRs) {
                releaseNotes += `- ${pr.title} #${pr.number}\n`;
              }
            } else {
              releaseNotes += '- No merged pull requests since last release\n';
            }
            
            releaseNotes += compareUrl;
            
            // Set output for next step
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `release_notes<<EOF\n${releaseNotes}\nEOF\n`);
            console.log('Release notes generated successfully');
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ steps.generate_notes.outputs.release_notes }}
          files: dist/**/*
