name: Create Release

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version"
        required: true
        type: string

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.78.0
          profile: minimal
      - name: Run tests
        run: cargo test --all

  create_tag:
    name: Create tag
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Git user
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "Invalid semantic version format"
            exit 1
          fi
      - name: Check if tag exists
        run: |
          if git rev-parse ${{ github.event.inputs.version }} >/dev/null 2>&1; then
            echo "Tag ${{ github.event.inputs.version }} already exists"
            exit 1
          fi
      - name: Tag and push
        run: |
          git tag ${{ github.event.inputs.version }}
          git push origin ${{ github.event.inputs.version }}

  build:
    name: Build binaries
    needs: create_tag
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.78.0
          profile: minimal
      - name: Build release binary
        run: cargo build --release
      - name: Package artifact
        shell: bash
        run: |
          mkdir -p dist
          TARGET=$(rustc -vV | sed -n 's|host: ||p')
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/release/aicm.exe dist/aicm-${TARGET}.exe
          else
            cp target/release/aicm dist/aicm-${TARGET}
          fi
          echo "TARGET=${TARGET}" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aicm-${{ env.TARGET }}
          path: dist/*

  release:
    name: Publish release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          path: dist
      - name: Generate release notes
        id: generate_notes
        run: |
          echo "Generating release notes..."
          
          # Get the latest release tag (excluding the current one)
          LATEST_TAG=$(git tag -l --sort=-version:refname | grep -v "^${{ github.event.inputs.version }}$" | head -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous release found, generating notes from first commit"
            COMPARE_FROM=$(git rev-list --max-parents=0 HEAD)
          else
            echo "Latest release: $LATEST_TAG"
            COMPARE_FROM="$LATEST_TAG"
          fi
          
          # Generate PR list using GitHub CLI
          RELEASE_NOTES="## What's Changed"$'\n'
          
          # Get merged PRs since last release
          PR_LIST=$(gh pr list --state merged --base main --json number,title,mergedAt,url --jq '.[] | select(.mergedAt > "'$(git log -1 --format=%cI $COMPARE_FROM 2>/dev/null || echo "1970-01-01T00:00:00Z")'") | "- \(.title) #\(.number)"')
          
          if [ -n "$PR_LIST" ]; then
            RELEASE_NOTES="$RELEASE_NOTES"$'\n'"$PR_LIST"
          else
            RELEASE_NOTES="$RELEASE_NOTES"$'\n'"- No merged pull requests since last release"
          fi
          
          # Add commit comparison link
          if [ -n "$LATEST_TAG" ]; then
            RELEASE_NOTES="$RELEASE_NOTES"$'\n'$'\n'"**Full Changelog**: https://github.com/${{ github.repository }}/compare/$LATEST_TAG...${{ github.event.inputs.version }}"
          fi
          
          # Save to file and environment
          echo "$RELEASE_NOTES" > release_notes.md
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.version }}
          name: Release ${{ github.event.inputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          files: dist/**/*
